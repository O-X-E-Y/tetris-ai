pub const I_RIGHT_LEFT: u64 = 263882790666240;
pub const I_DOWN_UP: u64 = 2305878194122661888;
pub const L_RIGHT: u64 = 9223618327459397632;
pub const L_DOWN: u64 = 4611756390392791040;
pub const L_LEFT: u64 = 246291141492736;
pub const L_UP: u64 = 6917599397459001344;
pub const J_RIGHT: u64 = 2306089299818315776;
pub const J_DOWN: u64 = 13835128425100083200;
pub const J_LEFT: u64 = 246292752105472;
pub const J_UP: u64 = 4611756388782178304;
pub const O_ALL: u64 = 13835269161514696704;
pub const T_RIGHT: u64 = 4611932309032009728;
pub const T_DOWN: u64 = 4611897126807404544;
pub const T_LEFT: u64 = 246291678363648;
pub const T_UP: u64 = 4611791572617396224;
pub const S_RIGHT_LEFT: u64 = 13835163608398430208;
pub const S_DOWN_UP: u64 = 2305948563403702272;
pub const Z_RIGHT_LEFT: u64 = 6917740133873614848;
pub const Z_DOWN_UP: u64 = 4611791572080525312;

#[cfg(test)]
mod tests {
    #[test]
    fn piece_orientations() {
        let orientations = [
            ((0u64, 0u64, 0b0001111000000000u64, 0u64), "I_Right_Left"),
            (
                (
                    0b0000010000000000,
                    0b0000010000000000,
                    0b0000010000000000,
                    0b0000010000000000,
                ),
                "I_Down_Up",
            ),
            ((0, 0, 0b0001110000000000, 0b0001000000000000), "L_Right"),
            (
                (
                    0,
                    0b0001100000000000,
                    0b0000100000000000,
                    0b0000100000000000,
                ),
                "L_Down",
            ),
            ((0, 0b0000010000000000, 0b0001110000000000, 0), "L_Left"),
            (
                (
                    0,
                    0b0000100000000000,
                    0b0000100000000000,
                    0b0000110000000000,
                ),
                "L_Up",
            ),
            ((0, 0, 0b0001110000000000, 0b0000010000000000), "J_Right"),
            (
                (
                    0,
                    0b0000100000000000,
                    0b0000100000000000,
                    0b0001100000000000,
                ),
                "J_Down",
            ),
            ((0, 0b0001000000000000, 0b0001110000000000, 0), "J_Left"),
            (
                (
                    0,
                    0b0000110000000000,
                    0b0000100000000000,
                    0b0000100000000000,
                ),
                "J_Up",
            ),
            ((0, 0, 0b0001100000000000, 0b0001100000000000), "O_All"),
            ((0, 0, 0b0001110000000000, 0b0000100000000000), "T_Right"),
            (
                (
                    0,
                    0b0001000000000000,
                    0b0001100000000000,
                    0b0000100000000000,
                ),
                "T_Down",
            ),
            ((0, 0b0000100000000000, 0b0001110000000000, 0), "T_Left"),
            (
                (
                    0,
                    0b0000100000000000,
                    0b0000110000000000,
                    0b0000100000000000,
                ),
                "T_Up",
            ),
            (
                (0, 0, 0b0000110000000000, 0b0001100000000000),
                "S_Right_Left",
            ),
            (
                (
                    0,
                    0b0000100000000000,
                    0b0000110000000000,
                    0b0000010000000000,
                ),
                "S_Down_Up",
            ),
            (
                (0, 0, 0b0001100000000000, 0b0000110000000000),
                "Z_Right_Left",
            ),
            (
                (
                    0,
                    0b0000010000000000,
                    0b0000110000000000,
                    0b0000100000000000,
                ),
                "Z_Down_Up",
            ),
        ];

        for ((r1, r2, r3, r4), apply_to) in orientations {
            let (r1, r2, r3, r4) = (r1 << 3, r2 << 3, r3 << 3, r4 << 3);
            // let versions = (14 - (r1 | r2 | r3 | r4).count_ones()) as u64;

            let mask = (r4 << 48) + (r3 << 32) + (r2 << 16) + r1;
            println!(
                "pub const {}: u64 = {mask};",
                apply_to.to_uppercase()
            );

            // for offset in 0..versions {
            //     let mut mask = (r4 << 48) + (r3 << 32) + (r2 << 16) + r1;
            //     mask >>= offset;

            //     println!("    {mask},")
            // }

            // println!("];")
        }
    }
}
